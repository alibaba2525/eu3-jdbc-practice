What are the part of GET REQUEST AND RESPONSE ?
GET REQUEST
    -BaseUrl + Endpoints(api methods)
    -Parameters
        1.Path Parameters /{id} --> it is a part of the URL
        2.Query Parameters (Key and Value) --> it is NOT part of the url, we separete with ?
    -Headers
        Accept,application/json,xml, .. --> hey api, please send me json, xml response body
        Auth,credentials(username,password,token,key..)
GET RESPONSE
    -Status code
        -2xx --> successful
        -4xx --> client error
        -5xx --> server error
    -Body
        -json
        -xml
        -text
        -html
        -....
    -headers
        Content-type, application/json,xml .. --> hey client, here your json response body
                                                              xml response body
================================
we manually test api with Postman.
we used Rest Assured library for automation.
we use swagger documentation to understand api.
if we want to verify existince of any header
response.headers().hasHeaderWithName("yourHeaderName") --> it will return boolean
this method will reutrn you true if the headers exists
if you want to get any header value
    -response.header("yourHearderName")
=============================
how to navigate through Json and read values from keys ?
there are multiple different ways of navigationg through json body/payload
    -using path() method
    -using JsonPath
    -using deseralization to collection
    -using desearalization to Java Custom Classes(POJO)
path() and JsonPath they both use Gpath syntax.
"items.findAll {it.region_id==2}.country_name"
look all the values inside the items and if region_id equals to 2 get country_name
findAll is kind of keyword to filter the result
{it.region_id==2} --> "it" is kind of iterator, for each region_id
check one by one and when region_id equals to 2
.country name --> put country name to the list

=====================================================

Response Validations
    so far, we send all request and stored responses into Response object, then did validations(status code,header,body)
    we can also do all of those actions in sinle statement by Hamcrest Mathers.
    if we are getting one value we can use equalTo("expectedValue") method.
    for working with multiple values we have hasItems("value1","value2",.."valueN") method

VERIFY RESPONSE BODY/PAYLOAD

1.using contains method(not recommended)
    --treat the response json as a String and do contains assertion on it.
        response.body().asString().contains("ExpectedValue");

2.using path() method
    Extract values from json body using path() method, then use TestNG for assertion
        String city = response.path("items.city[0]");
        assertEquals(city,"New York");

3.using JsonPath class
    Convert Response data into JsonPath then use jsonpath getter methods to extract values.
    Used TestNG for assertion.
        JsonPath jsonPath = response.jsonPath();
        assertEquals(json.getString("gender"),"Male")

4.Hamcrest Mathcers with chaining restassured methods.
    we can do assertions in single statement by chaining method in RestAssured.
    to find values in the body, we us the sam path syntax(Gpath syntax).
    then we use hamcrest matchers assertions to do validation
         .and().assertThat().body("id",equalTo(15),
                "name",equalTo("Meta"),
               "gender",equalTo("Female"),
                "phone",equalTo(1938695106));

5.Converting Json response to Java Collection/data structure
response body() --> java collection
{
    "id": 15,
    "name": "Meta",
    "gender": "Female",
    "phone": 1938695106
}
    Map<String,Object> jsonDataMap = response.body().as(Map.class);


    //INTERVIEW QUESTION-WHAT ARE THEY AND HOW TO USE:
    - De-serialization --> convertion your JSON to Java Collection!!!!!
    - Serialization --> convertiong your Java Collection to JSON !!!!!


6.

